// Prisma schema for Scavenger Hunt Map App
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin user model for authentication
model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String   // bcrypt hashed
  role      String   @default("editor") // admin or editor
  createdAt DateTime @default(now())
}

// Hotspot model for scavenger hunt locations
model Hotspot {
  id            String    @id @default(uuid())
  title         String
  description   String
  lat           Float
  lng           Float
  prize         Float?    // Prize amount in SOL
  startDate     DateTime
  endDate       DateTime
  active        Boolean   @default(true)
  imageUrl      String?
  privateKey    String?   // Encrypted Solana private key
  claimStatus   String    @default("unclaimed") // unclaimed, pending, claimed
  claimedBy     String?   // User identifier (IP or temp ID)
  claimedAt     DateTime?
  tweetUrl      String?   // Twitter proof URL
  queuePosition Int       @default(0) // 0 = active, 1+ = queued
  locationName  String?   // Cached geocoded location name
  
  // Automated prize wallet + funding lifecycle
  prizePrivateKeyEnc String?   // Encrypted prize wallet private key (AES-GCM)
  prizePublicKey     String?   // Prize wallet public key (base58)
  prizeAmountLamports BigInt   @default(0) @db.BigInt // Amount to fund on approval (in lamports)
  fundStatus          FundStatus @default(pending)    // pending | success | failed | skipped(=0 prize)
  fundTxSig           String?   // Funding transfer signature
  fundedAt            DateTime? // When funding confirmed
  walletCreatedAt     DateTime? // When prize wallet was generated
  
  // Hint system fields
  hint1         String?   // General area hint (optional)
  hint2         String?   // Specific location hint (optional)
  hint3         String?   // Exact spot hint (optional)
  hint1PriceUsd Float?    // Custom price in USD (null = use default)
  hint2PriceUsd Float?
  hint3PriceUsd Float?
  firstHintFree Boolean   @default(false) // Is hint 1 free?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  hintPurchases HintPurchase[]
  transfers     TreasuryTransferLog[]
}

// Funding status enum for prize wallet lifecycle
enum FundStatus {
  pending
  success
  failed
  skipped
}

// Audit and idempotency log for treasury transfers
model TreasuryTransferLog {
  id         String   @id @default(uuid())
  hotspotId  String
  lamports   BigInt   @db.BigInt
  type       String   // 'funding' (initial funding); future types reserved
  txSig      String?
  status     String   // 'success' | 'failed' | 'pending'
  createdAt  DateTime @default(now())

  // Relations
  hotspot    Hotspot  @relation(fields: [hotspotId], references: [id], onDelete: Cascade)

  // Indexes and idempotency
  @@index([hotspotId])
  @@unique([hotspotId, type]) // Ensure at most one 'funding' per hotspot
}

// Admin action log for audit trail
model AdminLog {
  id        String   @id @default(uuid())
  adminId   String
  action    String   // CREATE, UPDATE, DELETE
  entity    String   // Hotspot
  entityId  String
  details   String?  // Optional details about the action
  timestamp DateTime @default(now())
}

// Hint purchase tracking
model HintPurchase {
  id            String   @id @default(uuid())
  hotspotId     String
  walletAddress String   // Solana wallet that purchased
  hintLevel     Int      // 1, 2, or 3
  paidAmount    Float    // Amount of $PING paid (0 if free)
  paidUsd       Float    // USD value at time of purchase
  txSignature   String?  // Solana transaction signature (null if free)
  createdAt     DateTime @default(now())
  
  // Relations
  hotspot       Hotspot  @relation(fields: [hotspotId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@unique([walletAddress, hotspotId, hintLevel]) // Prevent duplicate purchases
  @@index([walletAddress, hotspotId])
  @@index([hotspotId])
}

// Global hint system settings (singleton)
// Note: Hint prices are configured per-hotspot, not globally
model HintSettings {
  id                String   @id @default("singleton")
  treasuryWallet    String   @default("") // Receives 50% of payments
  burnWallet        String   @default("") // Receives 50% of payments (admin burns manually)
  pingTokenMint     String   @default("") // $PING SPL token mint address for Jupiter price lookup
  
  // Buy Button Configuration
  buyButtonUrl      String   @default("")
  
  // Social Media Links with visibility toggles
  pumpFunUrl        String   @default("")
  pumpFunEnabled    Boolean  @default(false)
  xUsername         String   @default("")
  xEnabled          Boolean  @default(false)
  instagramUsername String   @default("")
  instagramEnabled  Boolean  @default(false)
  tiktokUsername    String   @default("")
  tiktokEnabled     Boolean  @default(false)
  
  updatedAt         DateTime @updatedAt
}
